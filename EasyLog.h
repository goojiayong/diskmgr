/*******************************************************************************
*   文件名称 : EasyLog.h
*   作    者 : 王全宝
*   创建时间 : 2015/10/8   16:08
*   文件描述 : 
*   版权声明 : Copyright (C) 2014-2015 湖南安存科技有限公司
*   修改历史 : 2015/10/8   1.00 初始版本
*******************************************************************************/

#pragma once

#ifdef _WINDOWS
#include <Windows.h>
#else
#include <pthread.h>
#include <memory.h>
#include <stdarg.h>
#endif

#include <stdio.h>


// 定义日志级别
enum 
{
    LOG_LEVEL_NONE,         // 无日志
    LOG_LEVEL_ERROR,        // 错误日志
    LOG_LEVEL_WARING,       // 警告日志
    LOG_LEVEL_DEBUG,        // 调试日志
    LOG_LEVEL_INFO          // 提示性日志
};

//类声明
class CEasyLog
{
public:
    /*******************************************************************************
    * 函数名称  : CEasyLog
    * 函数描述  : 构造函数
    * 输入参数  : N/A
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : N/A
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    CEasyLog();

    /*******************************************************************************
    * 函数名称  : ~CEasyLog
    * 函数描述  : 析构函数
    * 输入参数  : N/A
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : N/A
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    ~CEasyLog(void);

    /*******************************************************************************
    * 函数名称  : Open
    * 函数描述  : 开启日志系统
    * 输入参数  : pszLogFilePath：日志文件名
                 iLogLevel: 日志级别,默认error级别
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : N/A
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    void Open(const char* pszLogFilePath, int iLogLevel = LOG_LEVEL_ERROR);
 
    /*******************************************************************************
    * 函数名称  : Close
    * 函数描述  : 关闭日志系统
    * 输入参数  : N/A
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : N/A
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    void Close();

    /*******************************************************************************
    * 函数名称  : WriteLog
    * 函数描述  : 写日志
    * 输入参数  : iLevel:  日志级别
                  pszFmt: 输入日志信息
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : N/A
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    void WriteLog(int iLevel, const char* pszFile, int iLine, const char* pszFmt, ...);

private:
    /*******************************************************************************
    * 函数名称  : CheckFileSize
    * 函数描述  : 检查日志文件大小，超出大小则转储
    * 输入参数  : N/A
    * 输出参数  : N/A
    * 返回值    : N/A
    * 备注      : 如果大小超出门限则存入xx.bak中,后续日志继续在清空后的原日志文件写
    * 修改日期     修改人   修改内容
    * -----------------------------------------------
    * 2012/11/05    王全宝   新建
    *******************************************************************************/
    void CheckFileSize();

private:

#ifdef _WINDOWS
    HANDLE              m_hMutex; // 用于多线程同步,可用于不同进程的同步         
#else    
    pthread_mutex_t		m_pMutex;   
#endif

    // 日志文件名
    char                 m_szLogFilePath[FILENAME_MAX];
    // 设定的允许日志最高级别
    int                  m_iLogLevel;   
};

//#define EASYLOG_TRACE(obj) obj.SetFileAndLine(__FILE__,__LINE__); obj.WriteLog

//#define CLIENT_TRACE EASYLOG_TRACE(g_ClientLog)

#define MYTRACE(ilevel, ...)  g_ClientLog.WriteLog(ilevel, __FILE__, __LINE__, __VA_ARGS__)


extern CEasyLog   g_ClientLog;  //声明一个全局对象





